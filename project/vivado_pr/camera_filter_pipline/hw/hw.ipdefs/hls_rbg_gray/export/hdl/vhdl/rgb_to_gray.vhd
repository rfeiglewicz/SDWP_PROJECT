-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb_to_gray is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    grayscale_mode : IN STD_LOGIC );
end;


architecture behav of rgb_to_gray is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rgb_to_gray_rgb_to_gray,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.200000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=490,HLS_SYN_LUT=252,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv23_55 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal tmp_nbreadreq_fu_92_p7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal regslice_both_out_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grayscale_mode_read_read_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grayscale_mode_read_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal grayscale_mode_read_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grayscale_mode_read_reg_298_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grayscale_mode_read_reg_298_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grayscale_mode_read_reg_298_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_307_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_307_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_307_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_307_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_312_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_312_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_312_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_312_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_317 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_317_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_317_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_317_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_317_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_322_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_322_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_327_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_327_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_327_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_327_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_332 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_275_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal out_data_data_V_fu_256_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal p_Val2_s_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln674_fu_171_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_175_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_197_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_208_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_283_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grayscale_value_V_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_234_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_3_fu_244_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal grp_fu_268_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_275_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_275_p20 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_283_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component rgb_to_gray_mul_mul_16ns_7ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component rgb_to_gray_mac_muladd_16ns_7ns_23ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component rgb_to_gray_mac_muladd_16ns_7ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component rgb_to_gray_flow_control_loop_pipe_no_ap_cont IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;


    component rgb_to_gray_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_mul_16ns_7ns_23_4_1_U1 : component rgb_to_gray_mul_mul_16ns_7ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_268_p0,
        din1 => grp_fu_268_p1,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    mac_muladd_16ns_7ns_23ns_24_4_1_U2 : component rgb_to_gray_mac_muladd_16ns_7ns_23ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 23,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        din2 => grp_fu_275_p2,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p3);

    mac_muladd_16ns_7ns_24ns_24_4_1_U3 : component rgb_to_gray_mac_muladd_16ns_7ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        din2 => grp_fu_275_p3,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p3);

    flow_control_loop_pipe_no_ap_cont_U : component rgb_to_gray_flow_control_loop_pipe_no_ap_cont
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_const_logic_1,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_const_logic_0,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_const_logic_0);

    regslice_both_in_stream_V_data_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TDATA,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_data_V_U_ack_in,
        data_out => in_stream_TDATA_int_regslice,
        vld_out => in_stream_TVALID_int_regslice,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_data_V_U_apdone_blk);

    regslice_both_in_stream_V_keep_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TKEEP,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_keep_V_U_ack_in,
        data_out => in_stream_TKEEP_int_regslice,
        vld_out => regslice_both_in_stream_V_keep_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_keep_V_U_apdone_blk);

    regslice_both_in_stream_V_strb_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TSTRB,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_strb_V_U_ack_in,
        data_out => in_stream_TSTRB_int_regslice,
        vld_out => regslice_both_in_stream_V_strb_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_strb_V_U_apdone_blk);

    regslice_both_in_stream_V_user_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TUSER,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_user_V_U_ack_in,
        data_out => in_stream_TUSER_int_regslice,
        vld_out => regslice_both_in_stream_V_user_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_user_V_U_apdone_blk);

    regslice_both_in_stream_V_last_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TLAST,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_last_V_U_ack_in,
        data_out => in_stream_TLAST_int_regslice,
        vld_out => regslice_both_in_stream_V_last_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_last_V_U_apdone_blk);

    regslice_both_out_stream_V_data_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_V_data_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_data_V_U_apdone_blk);

    regslice_both_out_stream_V_keep_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_312_pp0_iter4_reg,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_keep_V_U_ack_in_dummy,
        data_out => out_stream_TKEEP,
        vld_out => regslice_both_out_stream_V_keep_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_keep_V_U_apdone_blk);

    regslice_both_out_stream_V_strb_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_317_pp0_iter4_reg,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_strb_V_U_ack_in_dummy,
        data_out => out_stream_TSTRB,
        vld_out => regslice_both_out_stream_V_strb_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_strb_V_U_apdone_blk);

    regslice_both_out_stream_V_user_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_322_pp0_iter4_reg,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_user_V_U_ack_in_dummy,
        data_out => out_stream_TUSER,
        vld_out => regslice_both_out_stream_V_user_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_user_V_U_apdone_blk);

    regslice_both_out_stream_V_last_V_U : component rgb_to_gray_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_327_pp0_iter4_reg,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_last_V_U_ack_in_dummy,
        data_out => out_stream_TLAST,
        vld_out => regslice_both_out_stream_V_last_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                grayscale_mode_read_reg_298 <= (0=>grayscale_mode, others=>'-');
                grayscale_mode_read_reg_298_pp0_iter1_reg <= grayscale_mode_read_reg_298;
                tmp_1_reg_337_pp0_iter1_reg <= tmp_1_reg_337;
                tmp_data_V_1_reg_307_pp0_iter1_reg <= tmp_data_V_1_reg_307;
                tmp_keep_V_reg_312_pp0_iter1_reg <= tmp_keep_V_reg_312;
                tmp_last_V_reg_327_pp0_iter1_reg <= tmp_last_V_reg_327;
                tmp_strb_V_reg_317_pp0_iter1_reg <= tmp_strb_V_reg_317;
                tmp_user_V_reg_322_pp0_iter1_reg <= tmp_user_V_reg_322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                grayscale_mode_read_reg_298_pp0_iter2_reg <= grayscale_mode_read_reg_298_pp0_iter1_reg;
                grayscale_mode_read_reg_298_pp0_iter3_reg <= grayscale_mode_read_reg_298_pp0_iter2_reg;
                grayscale_mode_read_reg_298_pp0_iter4_reg <= grayscale_mode_read_reg_298_pp0_iter3_reg;
                tmp_data_V_1_reg_307_pp0_iter2_reg <= tmp_data_V_1_reg_307_pp0_iter1_reg;
                tmp_data_V_1_reg_307_pp0_iter3_reg <= tmp_data_V_1_reg_307_pp0_iter2_reg;
                tmp_data_V_1_reg_307_pp0_iter4_reg <= tmp_data_V_1_reg_307_pp0_iter3_reg;
                tmp_keep_V_reg_312_pp0_iter2_reg <= tmp_keep_V_reg_312_pp0_iter1_reg;
                tmp_keep_V_reg_312_pp0_iter3_reg <= tmp_keep_V_reg_312_pp0_iter2_reg;
                tmp_keep_V_reg_312_pp0_iter4_reg <= tmp_keep_V_reg_312_pp0_iter3_reg;
                tmp_last_V_reg_327_pp0_iter2_reg <= tmp_last_V_reg_327_pp0_iter1_reg;
                tmp_last_V_reg_327_pp0_iter3_reg <= tmp_last_V_reg_327_pp0_iter2_reg;
                tmp_last_V_reg_327_pp0_iter4_reg <= tmp_last_V_reg_327_pp0_iter3_reg;
                tmp_strb_V_reg_317_pp0_iter2_reg <= tmp_strb_V_reg_317_pp0_iter1_reg;
                tmp_strb_V_reg_317_pp0_iter3_reg <= tmp_strb_V_reg_317_pp0_iter2_reg;
                tmp_strb_V_reg_317_pp0_iter4_reg <= tmp_strb_V_reg_317_pp0_iter3_reg;
                tmp_user_V_reg_322_pp0_iter2_reg <= tmp_user_V_reg_322_pp0_iter1_reg;
                tmp_user_V_reg_322_pp0_iter3_reg <= tmp_user_V_reg_322_pp0_iter2_reg;
                tmp_user_V_reg_322_pp0_iter4_reg <= tmp_user_V_reg_322_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                p_Val2_s_fu_82 <= out_data_data_V_fu_256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grayscale_mode_read_read_fu_86_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1))) then
                tmp_1_reg_337 <= in_stream_TDATA_int_regslice(15 downto 8);
                tmp_s_reg_332 <= in_stream_TDATA_int_regslice(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1))) then
                tmp_data_V_1_reg_307 <= in_stream_TDATA_int_regslice;
                tmp_keep_V_reg_312 <= in_stream_TKEEP_int_regslice;
                tmp_last_V_reg_327 <= in_stream_TLAST_int_regslice;
                tmp_strb_V_reg_317 <= in_stream_TSTRB_int_regslice;
                tmp_user_V_reg_322 <= in_stream_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(tmp_nbreadreq_fu_92_p7, regslice_both_out_stream_V_data_V_U_apdone_blk, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_loop_exit_ready_pp0_iter5_reg, in_stream_TVALID_int_regslice, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (out_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((in_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(tmp_nbreadreq_fu_92_p7, regslice_both_out_stream_V_data_V_U_apdone_blk, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_loop_exit_ready_pp0_iter5_reg, in_stream_TVALID_int_regslice, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (out_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((in_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(tmp_nbreadreq_fu_92_p7, regslice_both_out_stream_V_data_V_U_apdone_blk, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_loop_exit_ready_pp0_iter5_reg, in_stream_TVALID_int_regslice, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (out_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((in_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_92_p7, in_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((in_stream_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state7_pp0_stage0_iter6_assign_proc : process(out_stream_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (out_stream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_92_p7, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grayscale_mode_read_read_fu_86_p2 <= (0=>grayscale_mode, others=>'-');
    grayscale_value_V_fu_225_p4 <= grp_fu_283_p3(23 downto 16);

    grp_fu_268_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p0 <= grp_fu_268_p00(16 - 1 downto 0);
    grp_fu_268_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_175_p3),23));
    grp_fu_268_p1 <= ap_const_lv23_55(7 - 1 downto 0);

    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p0 <= grp_fu_275_p00(16 - 1 downto 0);
    grp_fu_275_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_197_p3),23));
    grp_fu_275_p1 <= ap_const_lv23_55(7 - 1 downto 0);
    grp_fu_275_p2 <= grp_fu_275_p20(23 - 1 downto 0);
    grp_fu_275_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_268_p2),24));

    grp_fu_283_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p0 <= grp_fu_283_p00(16 - 1 downto 0);
    grp_fu_283_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_208_p3),23));
    grp_fu_283_p1 <= ap_const_lv23_55(7 - 1 downto 0);

    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_92_p7, ap_block_pp0_stage0, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID_int_regslice;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= regslice_both_in_stream_V_data_V_U_ack_in;

    in_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_92_p7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_92_p7 = ap_const_lv1_1))) then 
            in_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    out_data_data_V_fu_256_p3 <= 
        p_Result_3_fu_244_p5 when (grayscale_mode_read_reg_298_pp0_iter4_reg(0) = '1') else 
        tmp_data_V_1_reg_307_pp0_iter4_reg;

    out_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, out_stream_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA_int_regslice <= 
        p_Result_3_fu_244_p5 when (grayscale_mode_read_reg_298_pp0_iter4_reg(0) = '1') else 
        tmp_data_V_1_reg_307_pp0_iter4_reg;
    out_stream_TVALID <= regslice_both_out_stream_V_data_V_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_175_p3 <= (trunc_ln674_fu_171_p1 & ap_const_lv8_0);
    p_Result_2_fu_208_p3 <= (tmp_1_reg_337_pp0_iter1_reg & ap_const_lv8_0);
    p_Result_3_fu_244_p5 <= (p_Val2_s_fu_82(31 downto 24) & tmp_2_fu_234_p4);
    p_Result_s_fu_197_p3 <= (tmp_s_reg_332 & ap_const_lv8_0);
    tmp_2_fu_234_p4 <= ((grayscale_value_V_fu_225_p4 & grayscale_value_V_fu_225_p4) & grayscale_value_V_fu_225_p4);
    tmp_nbreadreq_fu_92_p7 <= (0=>(in_stream_TVALID_int_regslice), others=>'-');
    trunc_ln674_fu_171_p1 <= in_stream_TDATA_int_regslice(8 - 1 downto 0);
end behav;
